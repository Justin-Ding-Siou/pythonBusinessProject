# validating international mobile phone number, one number at a time
import re

phones = [
'00886 932 324 009',
'+886 932 345 009',
'886 932 345 009',
'886 932456009',
'886 932-456-567',
'886-978-978-000',
'+886 978-978-000',
'886 978-978000',
'886 978-978 000',
'886978978000',
'00886 943 123-123',
'886 943 123123',
'886 978 978 00',
'02886 978 978 000',
'000886 978 978 000',
'887 943 123 123',
'886 843 123 123',
'886 943 123 444',
'+886 943 444 123',
'886 0933 123 123'
]


# More elaborated regex

# ^　 代表字串的開頭
# []　代表字元集中的任一字元, 例如 [abc] 可對應 a, b 或 c連續字元的定義可用"-", 例如 [a-d] = [abcd]
# \　　相鄰字元應視為常值，而非運算式中的字元
# +　　一個字元或以上的字元
# {}　N個字元
# |   邏輯 "Or"
# ?　　比對前一個字元或沒有
# \d　對應0-9的任一數字(= [0-9])
#　＄   代表字串的結尾
# 參考:http://120.105.184.250/cswang/thit/Linux/RegularExpression.htm


#  (1) 開頭可以有 00 或 +
# ^ 開頭
# regex 描述
# (1) 開頭可以有 00 或 +　([\+]{1}|[0]{2})
# 比對字元，?
# 888-888-888-888，判定 - 不為運算符號 \d{3}[ -]
# $ 結束
print("First Try:")
regex = r'^([\+]{1}|[0]{2})?\d{3}[ -]?\d{3}[ -]?\d{3}[ -]?\d{3}$'
for phone in phones:
  match = re.search(regex, phone)
  if match:
    print(phone)
print()

# (2) 國家碼是 886， 不接受其他數字，([\+]{1}|[0]{2})?886[ -]
# (3) 行動電話只能以 9 開頭         9\d{2}[ -] 		 
# (4) 沒有消費者不喜歡的數字， 例如 444  	(?!444)\d{3}[-]?(?!444)\d{3}
regex3 = r'^([\+]{1}|[0]{2})?886[ -]?9\d{2}[ -]?(?!444)\d{3}[ -]?(?!444)\d{3}$'
for phone in phones:
    match = re.search(regex3, phone)
    if match:
        print(match.group(0)) # print(match) <re.Match object; span=(0, 14), match='886 978-978000'>




